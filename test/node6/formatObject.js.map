{"version":3,"sources":["../src/formatObject.js"],"names":[],"mappings":";;AACA;;AACA;;AAFA;;;AAIA,KAAK,yCAAL,EAAgD,MAAM;AAClD,6BAAY,oBAAa,EAAb,CAAZ,EAA8B,EAA9B;AACH,CAFD;;AAKA,MAAM,UAAU,CAAC,MAAD,EAAS,KAAT,KACZ,UAAU,OAAO,MAAjB,GAA2B,YAAU,OAAO,IAAP,CAAY,GAAZ,CAAiB,MAAG,KAAM,YAA/D,GAA4E,KADhF;;AAIA,MAAM,YAAY,CAAC,MAAD,EAAS,KAAT,KAAmB,KAArC;;AAEA,KAAK,eAAL,EAAsB,MAAM;AACxB,6BACI,oBAAa,EAAE,GAAG,CAAL,EAAb,EAAuB,OAAvB,CADJ,EAEI,mEAFJ;AAIH,CALD;;AAOA,KAAK,0BAAL,EAAiC,MAAM;AACnC,6BACI,oBAAa,OAAO,MAAP,CAAc,OAAO,MAAP,CAAc,IAAd,CAAd,EAAmC,EAAE,GAAG,CAAL,EAAnC,CAAb,EAA2D,OAA3D,CADJ,EAEI,mEAFJ;AAIH,CALD;;AAOA,KAAK,aAAL,EAAoB,MAAM;AACtB,6BACI,oBAAa;AACT,aAAK;AACD,eAAG,oBADF;AAED,eAAG,oBAFF;AAGD,eAAG,oBAHF;AAID,eAAG,oBAJF;AAKD,eAAG,oBALF;AAMD,eAAG;AANF;AADI,KAAb,EASG,SATH,CADJ,EAWI,wKAXJ;AAaH,CAdD;;AAgBA,KAAK,6BAAL,EAAoC,MAAM;AACtC,6BACI,oBAAa,EAAE,GAAG,EAAL,EAAb,EAAwB,SAAxB,CADJ,EAEI,WAFJ;AAIH,CALD;;AAOA,KAAK,uBAAL,EAA8B,MAAM;AAChC,6BACI,oBAAa,EAAE,GAAG,EAAE,GAAG,CAAL,EAAL,EAAb,EAA8B,SAA9B,CADJ,EAEI,iBAFJ;AAIH,CALD;;AAOA,KAAK,yBAAL,EAAgC,MAAM;AAClC,QAAI,IAAI,EAAE,GAAG,CAAL,EAAR;AACA,MAAE,CAAF,GAAM,CAAN;AACA,6BACI,oBAAa,EAAE,CAAF,EAAb,EAAoB,SAApB,CADJ,EAEI,iCAFJ;AAIH,CAPD;;AASA,KAAK,aAAL,EAAoB,MAAM;AACtB,6BACI,oBAAa,EAAE,GAAG,EAAL,EAAb,EAAwB,SAAxB,CADJ,EAEI,WAFJ;AAIH,CALD;;AAQA,KAAK,cAAL,EAAqB,MAAM;AACvB,6BACI,oBAAa,EAAE,GAAG,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAL,EAAb,EAAuC,SAAvC,CADJ,EAEI,0BAFJ;AAIH,CALD;;AAOA,KAAK,iBAAL,EAAwB,MAAM;AAC1B,UAAM,MAAM,EAAE,GAAG,CAAL,EAAQ,GAAG,CAAX,EAAZ;AACA,6BACI,oBAAa,EAAE,GAAG,CAAC,GAAD,CAAL,EAAb,EAA2B,SAA3B,CADJ,EAEI,yBAFJ;AAIH,CAND;;AAQA,KAAK,kBAAL,EAAyB,MAAM;AAC3B,UAAM,MAAM,EAAE,GAAG,CAAL,EAAQ,GAAG,CAAX,EAAZ;AACA,6BACI,oBAAa,EAAE,GAAG,CAAC,GAAD,EAAM,GAAN,CAAL,EAAb,EAAgC,SAAhC,CADJ,EAEI,yCAFJ;AAIH,CAND;;AASA,KAAK,sCAAL,EAA6C,MAAM;AAC/C,UAAM,MAAM;AACR,WAAG,oBADK;AAER,WAAG,oBAFK;AAGR,WAAG,oBAHK;AAIR,WAAG,oBAJK;AAKR,WAAG,oBALK;AAMR,WAAG;AANK,KAAZ;AAQA,6BACI,oBAAa,EAAE,GAAG,CAAC,GAAD,EAAM,GAAN,CAAL,EAAb,EAAgC,SAAhC,CADJ,EAEK;;;;;EAFL;AASH,CAlBD","file":"formatObject.js","sourcesContent":["/* global test */\nimport { strictEqual } from 'assert';\nimport { formatObject } from '../..';\n\ntest('empty object should return empty string', () => {\n    strictEqual(formatObject({}), '');\n});\n\n\nconst styleFn = (styles, value) => (\n    styles && styles.length ? `[styles:${styles.join(',')}]${value}[/styles]` : value\n);\n\nconst noStyleFn = (styles, value) => value;\n\ntest('simple object', () => {\n    strictEqual(\n        formatObject({ a: 1 }, styleFn),\n        '{ [styles:gray-light,bold]a: [/styles][styles:yellow]1[/styles] }'\n    );\n});\n\ntest('simple without prototype', () => {\n    strictEqual(\n        formatObject(Object.assign(Object.create(null), { a: 1 }), styleFn),\n        '{ [styles:gray-light,bold]a: [/styles][styles:yellow]1[/styles] }'\n    );\n});\n\ntest('long object', () => {\n    strictEqual(\n        formatObject({\n            obj: {\n                a: 10000000000000000000,\n                b: 10000000000000000000,\n                c: 10000000000000000000,\n                d: 10000000000000000000,\n                e: 10000000000000000000,\n                f: 10000000000000000000,\n            },\n        }, noStyleFn),\n        '{\\n  obj: { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\\n}'\n    );\n});\n\ntest('simple embeded empty object', () => {\n    strictEqual(\n        formatObject({ a: {} }, noStyleFn),\n        '{ a: {} }'\n    );\n});\n\ntest('simple embeded object', () => {\n    strictEqual(\n        formatObject({ a: { b: 1 } }, noStyleFn),\n        '{ a: { b: 1 } }'\n    );\n});\n\ntest('simple recursive object', () => {\n    let a = { a: 1 };\n    a.a = a;\n    strictEqual(\n        formatObject({ a }, noStyleFn),\n        '{ a: { a: {Circular object} } }'\n    );\n});\n\ntest('empty array', () => {\n    strictEqual(\n        formatObject({ a: [] }, noStyleFn),\n        '{ a: [] }'\n    );\n});\n\n\ntest('simple array', () => {\n    strictEqual(\n        formatObject({ a: [1, '2', 3, 4, 5] }, noStyleFn),\n        '{ a: [1, \"2\", 3, 4, 5] }'\n    );\n});\n\ntest('object in array', () => {\n    const obj = { a: 1, b: 2 };\n    strictEqual(\n        formatObject({ a: [obj] }, noStyleFn),\n        '{ a: [{ a: 1, b: 2 }] }'\n    );\n});\n\ntest('objects in array', () => {\n    const obj = { a: 1, b: 2 };\n    strictEqual(\n        formatObject({ a: [obj, obj] }, noStyleFn),\n        '{ a: [{ a: 1, b: 2 }, { a: 1, b: 2 }] }'\n    );\n});\n\n\ntest('objects with breaking lines in array', () => {\n    const obj = {\n        a: 10000000000000000000,\n        b: 10000000000000000000,\n        c: 10000000000000000000,\n        d: 10000000000000000000,\n        e: 10000000000000000000,\n        f: 10000000000000000000,\n    };\n    strictEqual(\n        formatObject({ a: [obj, obj] }, noStyleFn),\n        `{\n  a: [\n    { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\n    { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\n  ],\n}`\n    );\n});\n"]}