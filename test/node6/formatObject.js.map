{"version":3,"sources":["../src/formatObject.js"],"names":["test","styleFn","styles","value","length","join","noStyleFn","a","Object","assign","create","obj","b","c","d","e","f"],"mappings":"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","file":"formatObject.js","sourcesContent":["/* global test */\nimport { strictEqual } from 'assert';\nimport { formatObject } from '../..';\n\ntest('empty object should return empty string', () => {\n  strictEqual(formatObject({}), '');\n});\n\n\nconst styleFn = (styles, value) => (\n    styles && styles.length ? `[styles:${styles.join(',')}]${value}[/styles]` : value\n);\n\nconst noStyleFn = (styles, value) => value;\n\ntest('simple object', () => {\n  strictEqual(\n        formatObject({ a: 1 }, styleFn),\n        '{ [styles:gray-light,bold]a:[/styles] [styles:yellow]1[/styles] }',\n    );\n});\n\ntest('simple without prototype', () => {\n  strictEqual(\n        formatObject(Object.assign(Object.create(null), { a: 1 }), styleFn),\n        '{ [styles:gray-light,bold]a:[/styles] [styles:yellow]1[/styles] }',\n    );\n});\n\ntest('long object', () => {\n  strictEqual(\n        formatObject({\n          obj: {\n            a: 10000000000000000000,\n            b: 10000000000000000000,\n            c: 10000000000000000000,\n            d: 10000000000000000000,\n            e: 10000000000000000000,\n            f: 10000000000000000000,\n          },\n        }, noStyleFn),\n        '{\\n  obj: { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\\n}',\n    );\n});\n\ntest('simple embeded empty object', () => {\n  strictEqual(\n        formatObject({ a: {} }, noStyleFn),\n        '{ a: {} }',\n    );\n});\n\ntest('simple embeded object', () => {\n  strictEqual(\n        formatObject({ a: { b: 1 } }, noStyleFn),\n        '{ a: { b: 1 } }',\n    );\n});\n\ntest('simple recursive object', () => {\n  let a = { a: 1 };\n  a.a = a;\n  strictEqual(\n        formatObject({ a }, noStyleFn),\n        '{ a: { a: {Circular object} } }',\n    );\n});\n\ntest('empty array', () => {\n  strictEqual(\n        formatObject({ a: [] }, noStyleFn),\n        '{ a: [] }',\n    );\n});\n\n\ntest('simple array', () => {\n  strictEqual(\n        formatObject({ a: [1, '2', 3, 4, 5] }, noStyleFn),\n        '{ a: [1, \"2\", 3, 4, 5] }',\n    );\n});\n\ntest('object in array', () => {\n  const obj = { a: 1, b: 2 };\n  strictEqual(\n        formatObject({ a: [obj] }, noStyleFn),\n        '{ a: [{ a: 1, b: 2 }] }',\n    );\n});\n\ntest('objects in array', () => {\n  const obj = { a: 1, b: 2 };\n  strictEqual(\n        formatObject({ a: [obj, obj] }, noStyleFn),\n        '{ a: [{ a: 1, b: 2 }, { a: 1, b: 2 }] }',\n    );\n});\n\n\ntest('objects with breaking lines in array', () => {\n  const obj = {\n    a: 10000000000000000000,\n    b: 10000000000000000000,\n    c: 10000000000000000000,\n    d: 10000000000000000000,\n    e: 10000000000000000000,\n    f: 10000000000000000000,\n  };\n  strictEqual(\n        formatObject({ a: [obj, obj] }, noStyleFn),\n        `{\n  a: [\n    { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\n    { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\n  ],\n}`,\n    );\n});\n"]}