{"version":3,"sources":["../src/formatObject.js"],"names":["suite","test","styleFn","styles","value","length","join","noStyleFn","a","Object","assign","create","obj","b","c","d","e","f"],"mappings":"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","file":"formatObject.js","sourcesContent":["/* global suite, test */\n/* eslint-disable max-len */\nimport { strictEqual } from 'assert';\nimport { formatObject } from '../..';\n\nsuite('formatObject', () => {\n  test('empty object should return empty string', () => {\n    strictEqual(formatObject({}), '');\n  });\n\n\n  const styleFn = (styles, value) => (\n    styles && styles.length ? `[styles:${styles.join(',')}]${value}[/styles]` : value\n  );\n\n  const noStyleFn = (styles, value) => value;\n\n  test('simple object', () => {\n    strictEqual(\n      formatObject({ a: 1 }, styleFn),\n      '{ [styles:gray-light,bold]a:[/styles] [styles:yellow]1[/styles] }',\n    );\n  });\n\n  test('simple without prototype', () => {\n    strictEqual(\n          formatObject(Object.assign(Object.create(null), { a: 1 }), styleFn),\n          '{ [styles:gray-light,bold]a:[/styles] [styles:yellow]1[/styles] }',\n      );\n  });\n\n  test('long object', () => {\n    strictEqual(\n      formatObject({\n        obj: {\n          a: 10000000000000000000,\n          b: 10000000000000000000,\n          c: 10000000000000000000,\n          d: 10000000000000000000,\n          e: 10000000000000000000,\n          f: 10000000000000000000,\n        },\n      }, noStyleFn),\n      '{\\n  obj: { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\\n}',\n    );\n  });\n\n  test('simple embeded empty object', () => {\n    strictEqual(\n      formatObject({ a: {} }, noStyleFn),\n      '{ a: {} }',\n    );\n  });\n\n  test('simple embeded object', () => {\n    strictEqual(\n      formatObject({ a: { b: 1 } }, noStyleFn),\n      '{ a: { b: 1 } }',\n    );\n  });\n\n  test('simple recursive object', () => {\n    let a = { a: 1 };\n    a.a = a;\n    strictEqual(\n      formatObject({ a }, noStyleFn),\n      '{ a: { a: {Circular object} } }',\n    );\n  });\n\n  test('empty array', () => {\n    strictEqual(\n      formatObject({ a: [] }, noStyleFn),\n      '{ a: [] }',\n    );\n  });\n\n\n  test('simple array', () => {\n    strictEqual(\n      formatObject({ a: [1, '2', 3, 4, 5] }, noStyleFn),\n      '{ a: [1, \"2\", 3, 4, 5] }',\n    );\n  });\n\n  test('object in array', () => {\n    const obj = { a: 1, b: 2 };\n    strictEqual(\n      formatObject({ a: [obj] }, noStyleFn),\n      '{ a: [{ a: 1, b: 2 }] }',\n    );\n  });\n\n  test('objects in array', () => {\n    const obj = { a: 1, b: 2 };\n    strictEqual(\n      formatObject({ a: [obj, obj] }, noStyleFn),\n      '{ a: [{ a: 1, b: 2 }, { a: 1, b: 2 }] }',\n    );\n  });\n\n\n  test('objects with breaking lines in array', () => {\n    const obj = {\n      a: 10000000000000000000,\n      b: 10000000000000000000,\n      c: 10000000000000000000,\n      d: 10000000000000000000,\n      e: 10000000000000000000,\n      f: 10000000000000000000,\n    };\n    strictEqual(\n      formatObject({ a: [obj, obj] }, noStyleFn),\n      `{\n  a: [\n    { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\n    { a: 10000000000000000000, b: 10000000000000000000, c: 10000000000000000000, d: 10000000000000000000, e: 10000000000000000000, f: 10000000000000000000 },\n  ],\n}`,\n    );\n  });\n});\n"]}