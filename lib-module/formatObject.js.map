{"version":3,"sources":["../src/formatObject.js"],"names":["noStyleFn","styles","value","tryStringify","arg","JSON","stringify","replace","_","sameRawFormattedValue","stringValue","formattedValue","internalFormatValue","styleFn","padding","depth","maxDepth","objects","typeofValue","undefined","toString","constructor","Object","internalFormatObject","Array","isArray","internalFormatArray","Error","stack","startsWith","message","Map","WeakMap","name","internalFormatMap","Set","WeakSet","internalFormatSet","separator","internalFormatKey","key","stringKey","formattedKey","internalFormatMapKey","internalFormatParams","internalFormatIterator","values","objectStyles","prefix","suffix","prefixSuffixSpace","formatKey","breakLine","formattedSeparator","valuesMaxIndex","length","map","index","indexOf","v","fv","join","object","has","keys","add","result","delete","from","get","array","set","formatObject"],"mappings":"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","file":"formatObject.js","sourcesContent":["/* eslint-disable no-use-before-define, max-lines, no-useless-concat, prefer-template */\n\nconst noStyleFn = (styles, value) => value;\n\nfunction tryStringify(arg) {\n  try {\n    return JSON.stringify(arg).replace(/\\\\n/g, '\\n');\n  } catch (_) {\n    return '[Circular]';\n  }\n}\n\nconst sameRawFormattedValue = value => ({ stringValue: value, formattedValue: value });\n\nfunction internalFormatValue(value, styleFn, styles, { padding, depth, maxDepth, objects }) {\n  const typeofValue = typeof value;\n\n  if (!styles) {\n    if (value == null) {\n      styles = ['cyan'];\n    } else {\n      switch (typeofValue) {\n        case 'boolean':\n          styles = ['green'];\n          break;\n        case 'number':\n          styles = ['yellow'];\n          break;\n        case 'string':\n          styles = ['orange'];\n          break;\n        case 'date':\n          styles = ['magenta'];\n          break;\n      }\n    }\n  }\n\n  let stringValue;\n  if (value === null) {\n    stringValue = 'null';\n  } else if (value === undefined) {\n    stringValue = 'undefined';\n  } else if (typeofValue === 'boolean') {\n    stringValue = value.toString();\n  } else if (value.constructor === Object) {\n    if (depth >= maxDepth) {\n      stringValue = '{Object...}';\n    } else {\n      return internalFormatObject(\n        value,\n        styleFn,\n        undefined,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else if (Array.isArray(value)) {\n    if (depth >= maxDepth) {\n      stringValue = '[Array...]';\n    } else {\n      return internalFormatArray(value, styleFn, { padding, depth: depth + 1, maxDepth, objects });\n    }\n  } else if (value instanceof Error) {\n    const stack = value.stack;\n    stringValue = stack.startsWith(value.message) ? stack : `${value.message}\\n${stack}`;\n  } else if (value instanceof Map || value instanceof WeakMap) {\n    const name = value.constructor.name;\n    if (depth >= maxDepth) {\n      stringValue = `{${name}...}`;\n    } else {\n      return internalFormatMap(\n        name,\n        value,\n        styleFn,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else if (value instanceof Set || value instanceof WeakSet) {\n    const name = value.constructor.name;\n    if (depth >= maxDepth) {\n      stringValue = `{${name}...}`;\n    } else {\n      return internalFormatSet(\n        name,\n        value,\n        styleFn,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else {\n    stringValue = tryStringify(value);\n  }\n\n  const formattedValue = styleFn(styles, stringValue);\n\n  return {\n    stringValue,\n    formattedValue,\n  };\n}\n\nconst separator = ',';\n\nconst internalFormatKey = (key, styleFn) => {\n  if (!key) return { stringKey: '', formattedKey: '' };\n  return {\n    stringKey: `${key}: `,\n    formattedKey: styleFn(['gray-light', 'bold'], `${key}:`) + ' ',\n  };\n};\n\nconst internalFormatMapKey = (key, styleFn, internalFormatParams) => {\n  const { stringValue, formattedValue } =\n    internalFormatValue(key, noStyleFn, undefined, internalFormatParams);\n  return {\n    stringKey: stringValue + ' => ',\n    formattedKey: styleFn(['gray-light', 'bold'], `${formattedValue}:`) + ' ',\n  };\n};\n\nconst internalFormatIterator = (\n  values,\n  styleFn,\n  objectStyles,\n  { padding, depth, maxDepth, objects },\n  { prefix, suffix, prefixSuffixSpace = ' ', formatKey = internalFormatKey },\n) => {\n  let breakLine = false;\n  const formattedSeparator = () => styleFn(['gray'], separator);\n\n  const valuesMaxIndex = values.length - 1;\n  values = values.map(({ key, value }, index) => {\n    const nextDepth = depth + 1;\n    const internalFormatParams = { padding, depth: nextDepth, maxDepth, objects };\n\n    // key must be formatted before value (browser-formatter needs order)\n    const { stringKey, formattedKey } = formatKey(key, styleFn, internalFormatParams);\n\n    let { stringValue, formattedValue } = internalFormatValue(\n      value,\n      styleFn,\n      key && objectStyles && objectStyles[key],\n      internalFormatParams,\n    );\n\n    if (stringValue && (stringValue.length > 80 || stringValue.indexOf('\\n') !== -1)) {\n      breakLine = true;\n      stringValue = stringValue.replace(/\\n/g, `\\n${padding}`);\n      formattedValue = formattedValue.replace(/\\n/g, `\\n${padding}`);\n    }\n\n    return {\n      stringValue: stringKey + stringValue + (index === valuesMaxIndex ? '' : separator),\n      // eslint-disable-next-line no-useless-concat\n      formattedValue: formattedKey + formattedValue + (index === valuesMaxIndex ? '' : formattedSeparator()),\n      // note: we need to format the separator for each values for browser-formatter\n    };\n  });\n\n  return {\n    stringValue: prefix + values\n      .map(breakLine ? v => `\\n${padding}${v.stringValue}` : fv => fv.stringValue)\n      .join(breakLine ? '\\n' : ' ')\n      + suffix,\n    // eslint-disable-next-line prefer-template\n    formattedValue: `${prefix}${breakLine ? '' : prefixSuffixSpace}`\n      + values.map(breakLine ? v => `\\n${padding}${v.formattedValue}` : v => v.formattedValue)\n        .join(breakLine ? '' : ' ')\n      + `${breakLine ? ',\\n' : prefixSuffixSpace}${suffix}`,\n  };\n};\n\nfunction internalFormatObject(\n  object,\n  styleFn,\n  objectStyles,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(object)) {\n    return sameRawFormattedValue('{Circular Object}');\n  }\n\n  const keys = Object.keys(object);\n  if (keys.length === 0) {\n    return sameRawFormattedValue('{}');\n  }\n\n  objects.add(object);\n\n  const result = internalFormatIterator(\n    keys.map(key => ({ key, value: object[key] })),\n    styleFn,\n    objectStyles,\n    { padding, depth, maxDepth, objects },\n    { prefix: '{', suffix: '}' },\n  );\n\n  objects.delete(object);\n\n  return result;\n}\n\nfunction internalFormatMap(\n  name,\n  map,\n  styleFn,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(map)) {\n    return sameRawFormattedValue(`{Circular ${name}`);\n  }\n\n  const keys = Array.from(map.keys());\n  if (keys.length === 0) {\n    return sameRawFormattedValue(`${name} {}`);\n  }\n\n  objects.add(map);\n\n  const result = internalFormatIterator(\n    keys.map(key => ({ key, value: map.get(key) })),\n    styleFn,\n    undefined,\n    { padding, depth, maxDepth, objects },\n    { prefix: `${name} {`, suffix: '}', formatKey: internalFormatMapKey },\n  );\n\n  objects.delete(map);\n\n  return result;\n}\n\n\nfunction internalFormatArray(array, styleFn, { padding, depth, maxDepth, objects }) {\n  if (objects.has(array)) {\n    return sameRawFormattedValue('{Circular Array}');\n  }\n\n  if (array.length === 0) {\n    return sameRawFormattedValue('[]');\n  }\n\n  objects.add(array);\n\n  const result = internalFormatIterator(\n    array.map(value => ({ key: undefined, value })),\n    styleFn,\n    undefined,\n    { padding, depth, maxDepth, objects },\n    { prefix: '[', suffix: ']', prefixSuffixSpace: '' },\n  );\n\n  objects.delete(array);\n\n  return result;\n}\n\nfunction internalFormatSet(\n  name,\n  set,\n  styleFn,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(set)) {\n    return sameRawFormattedValue(`{Circular ${name}`);\n  }\n\n  const values = Array.from(set.values());\n  if (values.length === 0) {\n    return sameRawFormattedValue(`${name} []`);\n  }\n\n  objects.add(set);\n\n  const result = internalFormatIterator(\n    values.map(value => ({ key: undefined, value })),\n    styleFn,\n    undefined,\n    { padding, depth, maxDepth, objects },\n    { prefix: `${name} [`, suffix: ']' },\n  );\n\n  objects.delete(set);\n\n  return result;\n}\n\nexport default function formatObject(object, styleFn, objectStyles, {\n  padding = '  ',\n  maxDepth = 10,\n} = {}) {\n  const { formattedValue: result } = internalFormatObject(\n    object,\n    styleFn,\n    objectStyles,\n    { padding, maxDepth, depth: 0, objects: new Set() },\n  );\n\n  if (result === '{}') {\n    return '';\n  }\n\n  return result;\n}\n"]}