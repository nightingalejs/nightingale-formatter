{"version":3,"sources":["../src/formatObject.js"],"names":["tryStringify","arg","JSON","stringify","_","internalFormatValue","value","styleFn","styles","padding","depth","maxDepth","objects","typeofValue","stringValue","undefined","toString","constructor","Object","internalFormatObject","Array","isArray","internalFormatArray","Error","stack","message","formattedValue","internalFormatIterator","values","objectStyles","prefix","suffix","prefixSuffixSpace","breakLine","map","key","index","nextDepth","length","indexOf","replace","v","fv","join","object","has","keys","add","result","delete","array","formatObject","Set"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AACzB,MAAI;AACF,WAAOC,KAAKC,SAAL,CAAeF,GAAf,CAAP;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,YAAP;AACD;AACF;;AAED,SAASC,mBAAT,CAA6BC,KAA7B,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqD,EAAEC,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAA5B,EAArD,EAA4F;AAC1F,MAAMC,cAAc,OAAOP,KAA3B;;AAEA,MAAI,CAACE,MAAL,EAAa;AACX,YAAQK,WAAR;AACE,WAAKP,SAAS,IAAd;AACEE,iBAAS,CAAC,MAAD,CAAT;AACA;AACF,WAAK,SAAL;AACEA,iBAAS,CAAC,OAAD,CAAT;AACA;AACF,WAAK,QAAL;AACEA,iBAAS,CAAC,QAAD,CAAT;AACA;AACF,WAAK,QAAL;AACEA,iBAAS,CAAC,QAAD,CAAT;AACA;AACF,WAAK,MAAL;AACEA,iBAAS,CAAC,SAAD,CAAT;AACA;;AAfJ;AAkBD;;AAED,MAAIM,uBAAJ;AACA,MAAIR,UAAU,IAAd,EAAoB;AAClBQ,kBAAc,MAAd;AACD,GAFD,MAEO,IAAIR,UAAUS,SAAd,EAAyB;AAC9BD,kBAAc,WAAd;AACD,GAFM,MAEA,IAAID,gBAAgB,SAApB,EAA+B;AACpCC,kBAAcR,MAAMU,QAAN,EAAd;AACD,GAFM,MAEA,IAAIV,MAAMW,WAAN,KAAsBC,MAA1B,EAAkC;AACvC,QAAIR,SAASC,QAAb,EAAuB;AACrBG,oBAAc,aAAd;AACD,KAFD,MAEO;AACL,aAAOK,qBACLb,KADK,EAELC,OAFK,EAGLQ,SAHK,EAIL,EAAEN,OAAF,EAAWC,OAAOA,QAAQ,CAA1B,EAA6BC,QAA7B,EAAuCC,OAAvC,EAJK,CAAP;AAMD;AACF,GAXM,MAWA,IAAIQ,MAAMC,OAAN,CAAcf,KAAd,CAAJ,EAA0B;AAC/B,QAAII,SAASC,QAAb,EAAuB;AACrBG,oBAAc,YAAd;AACD,KAFD,MAEO;AACL,aAAOQ,oBAAoBhB,KAApB,EAA2BC,OAA3B,EAAoC,EAAEE,OAAF,EAAWC,OAAOA,QAAQ,CAA1B,EAA6BC,QAA7B,EAAuCC,OAAvC,EAApC,CAAP;AACD;AACF,GANM,MAMA,IAAIN,iBAAiBiB,KAArB,EAA4B;AACjCT,kBAAcR,MAAMkB,KAAN,IAAelB,MAAMmB,OAArB,IAAgC,EAA9C;AACD,GAFM,MAEA;AACLX,kBAAcd,aAAaM,KAAb,CAAd;AACD;;AAED,MAAMoB,iBAAiBnB,QAAQC,MAAR,EAAgBM,WAAhB,CAAvB;;AAEA,SAAO;AACLA,eADK;AAELY;AAFK,GAAP;AAID;;AAED,SAASC,sBAAT,CACIC,MADJ,EAEIrB,OAFJ,EAGIsB,YAHJ,EAII,EAAEpB,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAA5B,EAJJ,EAKI,EAAEkB,MAAF,EAAUC,MAAV,EAAkBC,oBAAoB,GAAtC,EALJ,EAME;AACA,MAAIC,YAAY,KAAhB;;AAEAL,WAASA,OAAOM,GAAP,CAAW,CAAC,EAAEC,GAAF,EAAO7B,KAAP,EAAD,EAAiB8B,KAAjB,KAA2B;AAC7C,QAAIC,YAAY3B,QAAQ,CAAxB;;AAEA,QAAI,EAAEI,WAAF,EAAeY,cAAf,KAAkCrB,oBAC9BC,KAD8B,EAE9BC,OAF8B,EAG9B4B,OAAON,YAAP,IAAuBA,aAAaM,GAAb,CAHO,EAI9B,EAAE1B,OAAF,EAAWC,OAAO2B,SAAlB,EAA6B1B,QAA7B,EAAuCC,OAAvC,EAJ8B,CAAtC;;AAOA,QAAIE,gBAAgBA,YAAYwB,MAAZ,GAAqB,EAArB,IAA2BxB,YAAYyB,OAAZ,CAAoB,IAApB,QAA3C,CAAJ,EAAkF;AAChFN,kBAAY,IAAZ;AACAnB,oBAAcA,YAAY0B,OAAZ,CAAoB,KAApB,EAA4B,MAAI/B,OAAQ,GAAxC,CAAd;AACAiB,uBAAiBA,eAAec,OAAf,CAAuB,KAAvB,EAA+B,MAAI/B,OAAQ,GAA3C,CAAjB;AACD;;AAED,WAAO;AACLK,iBADK;AAEC;AACNY,sBAAgB,CAACS,MAAO,IAAE5B,QAAQ,CAAC,YAAD,EAAe,MAAf,CAAR,EAAiC,IAAE4B,GAAI,IAAvC,CAA2C,IAApD,GAAyD,EAA1D,IACQT;AAJnB,KAAP;AAMD,GAtBQ,CAAT;;AAyBA,SAAO;AACLZ,iBAAagB,SAASF,OACbM,GADa,CAEVD,YAAYQ,KAAM,MAAIhC,OAAQ,KAAEgC,EAAE3B,WAAY,GAA9C,GACE4B,MAAMA,GAAG5B,WAHD,EAIZ6B,IAJY,CAIPV,YAAY,KAAZ,GAAoB,IAJb,CAAT,GAI8BF,MALtC;AAMLL,oBAAiB,IAAEI,MAAO,KAAEG,YAAY,EAAZ,GAAiBD,iBAAkB,GAA/C,GACL,IAAEJ,OACIM,GADJ,CACQD,YAAYQ,KAAM,MAAIhC,OAAQ,KAAEgC,EAAEf,cAAe,GAAjD,GAAqDe,KAAKA,EAAEf,cADpE,EAEIiB,IAFJ,CAEU,IAAEpC,QAAQ,CAAC,MAAD,CAAR,EAAkB,GAAlB,CAAuB,KAAE0B,YAAY,EAAZ,GAAiB,GAAI,GAF1D,CAE6D,GAH1D,GAIL,IAAEA,YAAa,KAAb,GAAoBD,iBAAkB,KAAED,MAAO;AAVvD,GAAP;AAYD;;AAED,SAASZ,oBAAT,CACEyB,MADF,EAEErC,OAFF,EAGEsB,YAHF,EAIE,EAAEpB,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAA5B,EAJF,EAKE;AACA,MAAIA,QAAQiC,GAAR,CAAYD,MAAZ,CAAJ,EAAyB;AACvB,WAAO,EAAE9B,aAAa,mBAAf,EAAoCY,gBAAgB,mBAApD,EAAP;AACD;;AAGD,MAAMoB,OAAO5B,OAAO4B,IAAP,CAAYF,MAAZ,CAAb;AACA,MAAIE,KAAKR,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO;AACLxB,mBAAa,IADR;AAELY,sBAAgB;AAFX,KAAP;AAID;;AAEDd,UAAQmC,GAAR,CAAYH,MAAZ;;AAEA,MAAMI,SAASrB,uBACTmB,KAAKZ,GAAL,CAASC,QAAQ,EAAEA,GAAF,EAAO7B,OAAOsC,OAAOT,GAAP,CAAd,EAAR,CAAT,CADS,EAET5B,OAFS,EAGTsB,YAHS,EAIT,EAAEpB,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAA5B,EAJS,EAKT,EAAEkB,QAAQ,GAAV,EAAeC,QAAQ,GAAvB,EALS,CAAf;;AAQAnB,UAAQqC,MAAR,CAAeL,MAAf;;AAEA,SAAOI,MAAP;AACD;;AAGD,SAAS1B,mBAAT,CAA6B4B,KAA7B,EAAoC3C,OAApC,EAA6C,EAAEE,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAA5B,EAA7C,EAAoF;AAClF,MAAIA,QAAQiC,GAAR,CAAYK,KAAZ,CAAJ,EAAwB;AACtB,WAAO,EAAEpC,aAAa,kBAAf,EAAmCY,gBAAgB,kBAAnD,EAAP;AACD;;AAED,MAAIwB,MAAMZ,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO;AACLxB,mBAAa,IADR;AAELY,sBAAgB;AAFX,KAAP;AAID;;AAGDd,UAAQmC,GAAR,CAAYG,KAAZ;;AAEA,MAAMF,SAASrB,uBACTuB,MAAMhB,GAAN,CAAU5B,UAAU,EAAE6B,KAAKpB,SAAP,EAAkBT,KAAlB,EAAV,CAAV,CADS,EAETC,OAFS,EAGTQ,SAHS,EAIT,EAAEN,OAAF,EAAWC,KAAX,EAAkBC,QAAlB,EAA4BC,OAA5B,EAJS,EAKT,EAAEkB,QAAQ,GAAV,EAAeC,QAAQ,GAAvB,EAA4BC,mBAAmB,EAA/C,EALS,CAAf;;AAQApB,UAAQqC,MAAR,CAAeC,KAAf;;AAEA,SAAOF,MAAP;AACD;;AAED,eAAe,SAASG,YAAT,CAAsBP,MAAtB,EAA8BrC,OAA9B,EAAuCsB,YAAvC,EAAqD;AAChEpB,YAAU,IADsD;AAEhEE,aAAW;AAFqD,IAGhE,EAHW,EAGP;AACN,MAAM,EAAEe,gBAAgBsB,MAAlB,KAA6B7B,qBAC7ByB,MAD6B,EAE7BrC,OAF6B,EAG7BsB,YAH6B,EAI7B,EAAEpB,OAAF,EAAWE,QAAX,EAAqBD,OAAO,CAA5B,EAA+BE,SAAS,IAAIwC,GAAJ,EAAxC,EAJ6B,CAAnC;;AAOA,MAAIJ,WAAW,IAAf,EAAqB;AACnB,WAAO,EAAP;AACD;;AAED,SAAOA,MAAP;AACD","file":"formatObject.js","sourcesContent":["function tryStringify(arg) {\n  try {\n    return JSON.stringify(arg);\n  } catch (_) {\n    return '[Circular]';\n  }\n}\n\nfunction internalFormatValue(value, styleFn, styles, { padding, depth, maxDepth, objects }) {\n  const typeofValue = typeof value;\n\n  if (!styles) {\n    switch (typeofValue) {\n      case value == null:\n        styles = ['cyan'];\n        break;\n      case 'boolean':\n        styles = ['green'];\n        break;\n      case 'number':\n        styles = ['yellow'];\n        break;\n      case 'string':\n        styles = ['orange'];\n        break;\n      case 'date':\n        styles = ['magenta'];\n        break;\n\n    }\n  }\n\n  let stringValue;\n  if (value === null) {\n    stringValue = 'null';\n  } else if (value === undefined) {\n    stringValue = 'undefined';\n  } else if (typeofValue === 'boolean') {\n    stringValue = value.toString();\n  } else if (value.constructor === Object) {\n    if (depth >= maxDepth) {\n      stringValue = '{object...}';\n    } else {\n      return internalFormatObject(\n        value,\n        styleFn,\n        undefined,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else if (Array.isArray(value)) {\n    if (depth >= maxDepth) {\n      stringValue = '[array...]';\n    } else {\n      return internalFormatArray(value, styleFn, { padding, depth: depth + 1, maxDepth, objects });\n    }\n  } else if (value instanceof Error) {\n    stringValue = value.stack || value.message || '';\n  } else {\n    stringValue = tryStringify(value);\n  }\n\n  const formattedValue = styleFn(styles, stringValue);\n\n  return {\n    stringValue,\n    formattedValue,\n  };\n}\n\nfunction internalFormatIterator(\n    values,\n    styleFn,\n    objectStyles,\n    { padding, depth, maxDepth, objects },\n    { prefix, suffix, prefixSuffixSpace = ' ' },\n) {\n  let breakLine = false;\n\n  values = values.map(({ key, value }, index) => {\n    let nextDepth = depth + 1;\n\n    let { stringValue, formattedValue } = internalFormatValue(\n            value,\n            styleFn,\n            key && objectStyles && objectStyles[key],\n            { padding, depth: nextDepth, maxDepth, objects },\n        );\n\n    if (stringValue && (stringValue.length > 80 || stringValue.indexOf('\\n') !== -1)) {\n      breakLine = true;\n      stringValue = stringValue.replace(/\\n/g, `\\n${padding}`);\n      formattedValue = formattedValue.replace(/\\n/g, `\\n${padding}`);\n    }\n\n    return {\n      stringValue,\n            // eslint-disable-next-line no-useless-concat\n      formattedValue: (key ? `${styleFn(['gray-light', 'bold'], `${key}:`)} ` : '')\n                            + formattedValue,\n    };\n  });\n\n\n  return {\n    stringValue: prefix + values\n            .map(\n                breakLine ? v => `\\n${padding}${v.stringValue}`\n                : fv => fv.stringValue,\n            ).join(breakLine ? ',\\n' : ', ') + suffix,\n    formattedValue: `${prefix}${breakLine ? '' : prefixSuffixSpace}`\n            + `${values\n                    .map(breakLine ? v => `\\n${padding}${v.formattedValue}` : v => v.formattedValue)\n                    .join(`${styleFn(['gray'], ',')}${breakLine ? '' : ' '}`)}`\n            + `${breakLine ? `,\\n` : prefixSuffixSpace}${suffix}`,\n  };\n}\n\nfunction internalFormatObject(\n  object,\n  styleFn,\n  objectStyles,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(object)) {\n    return { stringValue: '{Circular object}', formattedValue: '{Circular object}' };\n  }\n\n\n  const keys = Object.keys(object);\n  if (keys.length === 0) {\n    return {\n      stringValue: '{}',\n      formattedValue: '{}',\n    };\n  }\n\n  objects.add(object);\n\n  const result = internalFormatIterator(\n        keys.map(key => ({ key, value: object[key] })),\n        styleFn,\n        objectStyles,\n        { padding, depth, maxDepth, objects },\n        { prefix: '{', suffix: '}' },\n    );\n\n  objects.delete(object);\n\n  return result;\n}\n\n\nfunction internalFormatArray(array, styleFn, { padding, depth, maxDepth, objects }) {\n  if (objects.has(array)) {\n    return { stringValue: '{Circular array}', formattedValue: '{Circular array}' };\n  }\n\n  if (array.length === 0) {\n    return {\n      stringValue: '[]',\n      formattedValue: '[]',\n    };\n  }\n\n\n  objects.add(array);\n\n  const result = internalFormatIterator(\n        array.map(value => ({ key: undefined, value })),\n        styleFn,\n        undefined,\n        { padding, depth, maxDepth, objects },\n        { prefix: '[', suffix: ']', prefixSuffixSpace: '' },\n    );\n\n  objects.delete(array);\n\n  return result;\n}\n\nexport default function formatObject(object, styleFn, objectStyles, {\n    padding = '  ',\n    maxDepth = 10,\n} = {}) {\n  const { formattedValue: result } = internalFormatObject(\n        object,\n        styleFn,\n        objectStyles,\n        { padding, maxDepth, depth: 0, objects: new Set() },\n    );\n\n  if (result === '{}') {\n    return '';\n  }\n\n  return result;\n}\n"]}