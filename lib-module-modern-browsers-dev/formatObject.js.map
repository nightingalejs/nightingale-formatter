{"version":3,"sources":["../src/formatObject.js"],"names":["noStyleFn","styles","value","tryStringify","arg","JSON","stringify","_","sameRawFormattedValue","stringValue","formattedValue","internalFormatValue","styleFn","padding","depth","maxDepth","objects","typeofValue","undefined","toString","constructor","Object","internalFormatObject","Array","isArray","internalFormatArray","Error","stack","startsWith","message","Map","WeakMap","name","internalFormatMap","Set","WeakSet","internalFormatSet","separator","internalFormatKey","key","stringKey","formattedKey","internalFormatMapKey","internalFormatParams","internalFormatIterator","values","objectStyles","prefix","suffix","prefixSuffixSpace","formatKey","breakLine","formattedSeparator","valuesMaxIndex","length","map","index","indexOf","replace","v","fv","join","object","has","keys","add","result","delete","from","get","array","set","formatObject"],"mappings":"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","file":"formatObject.js","sourcesContent":["/* eslint-disable no-use-before-define, max-lines, no-useless-concat, prefer-template */\n\nconst noStyleFn = (styles, value) => value;\n\nfunction tryStringify(arg) {\n  try {\n    return JSON.stringify(arg);\n  } catch (_) {\n    return '[Circular]';\n  }\n}\n\nconst sameRawFormattedValue = value => ({ stringValue: value, formattedValue: value });\n\nfunction internalFormatValue(value, styleFn, styles, { padding, depth, maxDepth, objects }) {\n  const typeofValue = typeof value;\n\n  if (!styles) {\n    if (value == null) {\n      styles = ['cyan'];\n    } else {\n      switch (typeofValue) {\n        case 'boolean':\n          styles = ['green'];\n          break;\n        case 'number':\n          styles = ['yellow'];\n          break;\n        case 'string':\n          styles = ['orange'];\n          break;\n        case 'date':\n          styles = ['magenta'];\n          break;\n      }\n    }\n  }\n\n  let stringValue;\n  if (value === null) {\n    stringValue = 'null';\n  } else if (value === undefined) {\n    stringValue = 'undefined';\n  } else if (typeofValue === 'boolean') {\n    stringValue = value.toString();\n  } else if (value.constructor === Object) {\n    if (depth >= maxDepth) {\n      stringValue = '{Object...}';\n    } else {\n      return internalFormatObject(\n        value,\n        styleFn,\n        undefined,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else if (Array.isArray(value)) {\n    if (depth >= maxDepth) {\n      stringValue = '[Array...]';\n    } else {\n      return internalFormatArray(value, styleFn, { padding, depth: depth + 1, maxDepth, objects });\n    }\n  } else if (value instanceof Error) {\n    const stack = value.stack;\n    stringValue = stack.startsWith(value.message) ? stack : `${value.message}\\n${stack}`;\n  } else if (value instanceof Map || value instanceof WeakMap) {\n    const name = value.constructor.name;\n    if (depth >= maxDepth) {\n      stringValue = `{${name}...}`;\n    } else {\n      return internalFormatMap(\n        name,\n        value,\n        styleFn,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else if (value instanceof Set || value instanceof WeakSet) {\n    const name = value.constructor.name;\n    if (depth >= maxDepth) {\n      stringValue = `{${name}...}`;\n    } else {\n      return internalFormatSet(\n        name,\n        value,\n        styleFn,\n        { padding, depth: depth + 1, maxDepth, objects },\n      );\n    }\n  } else {\n    stringValue = tryStringify(value);\n  }\n\n  const formattedValue = styleFn(styles, stringValue);\n\n  return {\n    stringValue,\n    formattedValue,\n  };\n}\n\nconst separator = ',';\n\nconst internalFormatKey = (key, styleFn) => {\n  if (!key) return { stringKey: '', formattedKey: '' };\n  return {\n    stringKey: `${key}: `,\n    formattedKey: styleFn(['gray-light', 'bold'], `${key}:`) + ' ',\n  };\n};\n\nconst internalFormatMapKey = (key, styleFn, internalFormatParams) => {\n  const { stringValue, formattedValue } =\n    internalFormatValue(key, noStyleFn, undefined, internalFormatParams);\n  return {\n    stringKey: stringValue + ' => ',\n    formattedKey: styleFn(['gray-light', 'bold'], `${formattedValue}:`) + ' ',\n  };\n};\n\nconst internalFormatIterator = (\n  values,\n  styleFn,\n  objectStyles,\n  { padding, depth, maxDepth, objects },\n  { prefix, suffix, prefixSuffixSpace = ' ', formatKey = internalFormatKey },\n) => {\n  let breakLine = false;\n  const formattedSeparator = () => styleFn(['gray'], separator);\n\n  const valuesMaxIndex = values.length - 1;\n  values = values.map(({ key, value }, index) => {\n    const nextDepth = depth + 1;\n    const internalFormatParams = { padding, depth: nextDepth, maxDepth, objects };\n\n    // key must be formatted before value (browser-formatter needs order)\n    const { stringKey, formattedKey } = formatKey(key, styleFn, internalFormatParams);\n\n    let { stringValue, formattedValue } = internalFormatValue(\n      value,\n      styleFn,\n      key && objectStyles && objectStyles[key],\n      internalFormatParams,\n    );\n\n    if (stringValue && (stringValue.length > 80 || stringValue.indexOf('\\n') !== -1)) {\n      breakLine = true;\n      stringValue = stringValue.replace(/\\n/g, `\\n${padding}`);\n      formattedValue = formattedValue.replace(/\\n/g, `\\n${padding}`);\n    }\n\n    return {\n      stringValue: stringKey + stringValue + (index === valuesMaxIndex ? '' : separator),\n      // eslint-disable-next-line no-useless-concat\n      formattedValue: formattedKey + formattedValue + (index === valuesMaxIndex ? '' : formattedSeparator()),\n      // note: we need to format the separator for each values for browser-formatter\n    };\n  });\n\n  return {\n    stringValue: prefix + values\n      .map(breakLine ? v => `\\n${padding}${v.stringValue}` : fv => fv.stringValue)\n      .join(breakLine ? '\\n' : ' ')\n      + suffix,\n    // eslint-disable-next-line prefer-template\n    formattedValue: `${prefix}${breakLine ? '' : prefixSuffixSpace}`\n      + values.map(breakLine ? v => `\\n${padding}${v.formattedValue}` : v => v.formattedValue)\n        .join(breakLine ? '' : ' ')\n      + `${breakLine ? ',\\n' : prefixSuffixSpace}${suffix}`,\n  };\n};\n\nfunction internalFormatObject(\n  object,\n  styleFn,\n  objectStyles,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(object)) {\n    return sameRawFormattedValue('{Circular Object}');\n  }\n\n  const keys = Object.keys(object);\n  if (keys.length === 0) {\n    return sameRawFormattedValue('{}');\n  }\n\n  objects.add(object);\n\n  const result = internalFormatIterator(\n    keys.map(key => ({ key, value: object[key] })),\n    styleFn,\n    objectStyles,\n    { padding, depth, maxDepth, objects },\n    { prefix: '{', suffix: '}' },\n  );\n\n  objects.delete(object);\n\n  return result;\n}\n\nfunction internalFormatMap(\n  name,\n  map,\n  styleFn,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(map)) {\n    return sameRawFormattedValue(`{Circular ${name}`);\n  }\n\n  const keys = Array.from(map.keys());\n  if (keys.length === 0) {\n    return sameRawFormattedValue(`${name} {}`);\n  }\n\n  objects.add(map);\n\n  const result = internalFormatIterator(\n    keys.map(key => ({ key, value: map.get(key) })),\n    styleFn,\n    undefined,\n    { padding, depth, maxDepth, objects },\n    { prefix: `${name} {`, suffix: '}', formatKey: internalFormatMapKey },\n  );\n\n  objects.delete(map);\n\n  return result;\n}\n\n\nfunction internalFormatArray(array, styleFn, { padding, depth, maxDepth, objects }) {\n  if (objects.has(array)) {\n    return sameRawFormattedValue('{Circular Array}');\n  }\n\n  if (array.length === 0) {\n    return sameRawFormattedValue('[]');\n  }\n\n  objects.add(array);\n\n  const result = internalFormatIterator(\n    array.map(value => ({ key: undefined, value })),\n    styleFn,\n    undefined,\n    { padding, depth, maxDepth, objects },\n    { prefix: '[', suffix: ']', prefixSuffixSpace: '' },\n  );\n\n  objects.delete(array);\n\n  return result;\n}\n\nfunction internalFormatSet(\n  name,\n  set,\n  styleFn,\n  { padding, depth, maxDepth, objects },\n) {\n  if (objects.has(set)) {\n    return sameRawFormattedValue(`{Circular ${name}`);\n  }\n\n  const values = Array.from(set.values());\n  if (values.length === 0) {\n    return sameRawFormattedValue(`${name} []`);\n  }\n\n  objects.add(set);\n\n  const result = internalFormatIterator(\n    values.map(value => ({ key: undefined, value })),\n    styleFn,\n    undefined,\n    { padding, depth, maxDepth, objects },\n    { prefix: `${name} [`, suffix: ']' },\n  );\n\n  objects.delete(set);\n\n  return result;\n}\n\nexport default function formatObject(object, styleFn, objectStyles, {\n  padding = '  ',\n  maxDepth = 10,\n} = {}) {\n  const { formattedValue: result } = internalFormatObject(\n    object,\n    styleFn,\n    objectStyles,\n    { padding, maxDepth, depth: 0, objects: new Set() },\n  );\n\n  if (result === '{}') {\n    return '';\n  }\n\n  return result;\n}\n"]}