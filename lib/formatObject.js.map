{"version":3,"sources":["../src/formatObject.js"],"names":[],"mappings":";;;;;kBAAwB,Y;;;;;;EAAT,SAAS,YAAT,CAAsB,MAAtB,EAA8B,OAA9B,EAAuC,YAAvC,EAAqD;AAChE,UAAM,OAAO,OAAO,IAAP,CAAY,MAAZ,CAAb;;AAEA,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACnB;AACH;;AAED,QAAI,YAAY,KAAhB;AACA,UAAM,qBAAqB,KAAK,GAAL,CAAS,CAAC,GAAD,EAAM,KAAN,KAAgB;AAChD,YAAI,YAAY,KAAhB;AACA,cAAM,QAAQ,OAAO,GAAP,CAAd;AACA,YAAI,SAAS,gBAAgB,aAAa,GAAb,CAA7B;;AAEA,YAAI,CAAC,MAAL,EAAa;AACT,oBAAQ,OAAO,KAAf;AACI,qBAAK,SAAL;AACI,6BAAS,CAAC,OAAD,CAAT;AACA;AACJ,qBAAK,QAAL;AACI,6BAAS,CAAC,QAAD,CAAT;AACA;AACJ,qBAAK,QAAL;AACI,6BAAS,CAAC,QAAD,CAAT;AACA;;AATR;AAYH;;AAED,YAAI,WAAJ;AACA,YAAI,SAAS,MAAM,WAAN,KAAsB,MAAnC,EAA2C;AACvC,0BAAc,aAAa,KAAb,EAAoB,OAApB,CAAd;AACH,SAFD,MAEO,IAAI,iBAAiB,KAArB,EAA4B;AAC/B,0BAAc,MAAM,KAAN,IAAe,MAAM,OAAnC;AACH,SAFM,MAEA;AACH,0BAAc,KAAK,SAAL,CAAe,KAAf,CAAd;AACH;;AAED,YAAI,YAAY,MAAZ,GAAqB,EAArB,IAA2B,YAAY,OAAZ,CAAoB,IAApB,MAA8B,CAAC,CAA9D,EAAiE;AAC7D,wBAAY,YAAY,IAAxB;AACH;;AAED,eAAO,CAAC,AAAD,GAAG,aAAa,UAAU,CAAvB,GAA2B,KAA3B,GAAmC,EAAtC,EAAyC,AAAzC,GAA2C,QAAQ,CAAC,YAAD,EAAe,MAAf,CAAR,EAAgC,CAAC,AAAD,GAAG,GAAH,EAAO,CAAP,CAAhC,CAA3C,EAAsF,AAAtF,IACD,CAAC,CAAD,GAAI,QAAQ,MAAR,EAAgB,WAAhB,CAAJ,EAAiC,AAAjC,GAAmC,YAAY,KAAZ,GAAoB,EAAvD,EAA0D,AAA1D,CADN;AAEH,KAnC0B,CAA3B;;AAqCA,WAAO,CAAC,CAAD,GAAI,YAAY,KAAZ,GAAoB,GAAxB,EAA4B,AAA5B,GAA8B,mBAAmB,IAAnB,CAAwB,QAAQ,CAAC,MAAD,CAAR,EAAkB,IAAlB,CAAxB,CAA9B,EAA+E,EAA/E,CAAP;AACH","file":"formatObject.js","sourcesContent":["export default function formatObject(object, styleFn, objectStyles) {\n    const keys = Object.keys(object);\n\n    if (keys.length === 0) {\n        return;\n    }\n\n    let brokeLine = false;\n    const formattedKeyValues = keys.map((key, index) => {\n        let breakLine = false;\n        const value = object[key];\n        let styles = objectStyles && objectStyles[key];\n\n        if (!styles) {\n            switch (typeof value) {\n                case 'boolean':\n                    styles = ['green'];\n                    break;\n                case 'number':\n                    styles = ['yellow'];\n                    break;\n                case 'string':\n                    styles = ['orange'];\n                    break;\n\n            }\n        }\n\n        let stringValue;\n        if (value && value.constructor === Object) {\n            stringValue = formatObject(value, styleFn);\n        } else if (value instanceof Error) {\n            stringValue = value.stack || value.message;\n        } else {\n            stringValue = JSON.stringify(value);\n        }\n\n        if (stringValue.length > 80 || stringValue.indexOf('\\n') !== -1) {\n            brokeLine = breakLine = true;\n        }\n\n        return `${breakLine && index !== 0 ? '\\n ' : ''}${styleFn(['gray-light', 'bold'], `${key}:`)}`\n            + ` ${styleFn(styles, stringValue)}${breakLine ? '\\n ' : ''}`;\n    });\n\n    return `{${brokeLine ? '\\n ' : ' '}${formattedKeyValues.join(styleFn(['gray'], ', '))} }`;\n}\n"]}